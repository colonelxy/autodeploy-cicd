
version: 2.1
orbs: 
  slack: circleci/slack@4.10.1
  
commands:
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
  
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd3
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 

  install_ansible:
    description: Install AWS ansible
    steps:
      - run:
          name: Install AWS ansible
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
            python3 -m pip install --user ansible

            # software-properties-common -y
            # sudo add-apt-repository --yes --update ppa:ansible/ansible
            # sudo apt install ansible -y  

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            sudo npm install -g n
            sudo n 13.8.0

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
      - notify_on_failure

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test Back-end 
          command: |
            cd backend
            npm install
            npm run test
      - notify_on_failure

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            # npm audit fix --audit-level=critical
            npm audit --audit-level=critical
      - slack/notify:
          channel: cicd3
          event: fail
          template: basic_fail_1
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan Back-end 
          command: |
            cd backend
            npm install
            #npm install oauth-sign@^0.9.0
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="udapeople" \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            
            echo "[all]" >> .circleci/ansible/inventory.txt
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

            # yum install -y tar gzip
            # echo [all] > ~/inventory
            # aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> ~/inventory
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy_environment
      - notify_on_failure

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run: apk add --update tar gzip
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["c9:cb:c9:26:16:da:2e:d5:72:c8:f9:60:65:3b:77:9d"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: install aws cli
          command: |
            #test
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install     
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install            
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt

      - run:
          name: Send migration results to KVDB
          command: |
            cd backend
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              curl -d '1' https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  
              
            fi
            echo "Results sent to KVDB"
      - revert-migrations
      - destroy_environment



  deploy-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run: sudo apt-get install tar gzip -y
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install   
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment

  deploy-backend:
    docker:


      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs

      - add_ssh_keys:
          fingerprints: ["c9:cb:c9:26:16:da:2e:d5:72:c8:f9:60:65:3b:77:9d"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -czvf artifact.tar.gz backend
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            echo "Contents  of the inventory file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment   
      - revert-migrations 
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install curl"
          command: |
            yum install -y curl
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 1
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi 
      - destroy_environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |           
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/previous_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy_environment
      - revert-migrations  
      
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            
            export Old_Workflow_ID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/previous_id)
            echo Old Workflow ID: $Old_Workflow_ID 
 
            Current_Workflow_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo Current Wokflow ID: $Current_Workflow_ID
            
            if [[ "$Current_Workflow_ID" != "$Old_Workflow_ID" ]]
                then
                    echo "$Old_Workflow_ID != $Current_Workflow_ID: the old stack and files are going to be deleted"
                    aws s3 rm "s3://udapeople-${Old_Workflow_ID}" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-${Old_Workflow_ID}"
                    aws cloudformation delete-stack --stack-name "udapeople-backend-${Old_Workflow_ID}" 
                    echo "----------Delete Confirmed!---------"
                else [ "$Current_Workflow_ID" == "$Old_Workflow_ID" ]
                    echo "The old and new stacks are the same, no changes applied"
            fi


  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd_pipeline
          template: success_target_deployment_1 

workflows:
  my-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]