version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: cicd_pipeline
          template: basic_fail_1

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install 

  install_ansible:
    description: Install AWS ansible
    steps:
      - run:
          name: Install AWS ansible
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip
            python3 -m pip install --user ansible

            # software-properties-common -y
            # sudo add-apt-repository --yes --update ppa:ansible/ansible
            # sudo apt install ansible -y  

  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs

            sudo npm install -g n
            sudo n 13.8.0

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
           aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
           aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
           aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration 
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if (( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi


            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
      - notify_on_failure

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Frontend Unit Test
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure
     
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Backend Unit Test
          command: |
             cd backend
             npm install
             npm test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
      - notify_on_failure
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Frontend Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical 
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Backend Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment 
      - notify_on_failure


  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["c9:cb:c9:26:16:da:2e:d5:72:c8:f9:60:65:3b:77:9d"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      - notify_on_failure


  run_db_migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            cd backend
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations  
      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
     

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["c9:cb:c9:26:16:da:2e:d5:72:c8:f9:60:65:3b:77:9d"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm i
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |  
            export TYPEORM_MIGRATIONS_DIR='./migrations'
            export TYPEORM_ENTITIES='./modules/domain/**/*.entity{.ts,.js}'
            export TYPEORM_MIGRATIONS='./migrations/*.ts ' 
            
            cd .circleci/ansible
            echo "Contents of the inventory.txt file is ---"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
          
      - destroy-environment
      - revert-migrations 
     


  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Install curl"
          command: |
            yum install -y curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)

            export API_URL=http://${BACKEND_IP}:3030
            curl "http://${BACKEND_IP}:3030/api/status"
            # echo "API_URL = ${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            echo ${FRONTEND_URL}            
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi 
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_id -d "${OLD_WORKFLOW_ID}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            printf '%s\n' "${STACKS[@]}"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
            echo "Current Wokflow ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            echo "----------Delete Confirmed!---------"  


            # if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
            #   echo "Removing previous stack"
            #   # aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
            # fi
      #       export OLD_WORKFLOW_ID=$(aws cloudformation \
      #                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
      #                 --no-paginate --output text)
           
      #       curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      # - run:
      #     name: Update cloudfront distribution
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/cloudfront.yml \
      #         --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --stack-name InitialStack

      #       echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
      #       echo "Current Wokflow ID: ${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - install_awscli
      - run:
          name: Get old workflow ID and remove old stacks and files
          command: |
            yum install -y curl 
            export Old_Workflow_ID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_id)
            echo Old Workflow ID: $Old_Workflow_ID 
            # Fetch the stack names 

            echo "Old Workflow ID=$Old_Workflow_ID"
            Current_Workflow_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo "Current Wokflow ID=$Current_Workflow_ID
            if [ -z "$Old_Workflow_ID" ]
            then
                echo "No Old Workflow ID found, nothing to cleanup."
            else
                if [[ "$Current_Workflow_ID" != "$Old_Workflow_ID" ]]
                then
                    echo "$Old_Workflow_ID!=$Current_Workflow_ID: the old stack and files are going to be deleted"
                    aws s3 rm "s3://udapeople-${Old_Workflow_ID}" --recursive
                    aws cloudformation delete-stack --stack-name "udapeople-frontend-${Old_Workflow_ID}"
                    aws cloudformation delete-stack --stack-name "udapeople-backend-${Old_Workflow_ID}"
                else
                    echo "$Old_Workflow_ID==$Current_Workflow_ID: the old and new stacks are the same, no changes applied"
                fi
            fi


            # export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            # --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            # echo Stack names: "${STACKS[@]}"          
            # if [[ "${STACKS[@]}" =~ ${OLDWORKFLOWID} ]]
            # then
            #   aws s3 rm "s3://udapeople-${OLDWORKFLOWID}" --recursive
            #   aws cloudformation delete-stack --stack-name "udapeople-backend-${OLDWORKFLOWID}"
            #   aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLDWORKFLOWID}"
            #   echo cleaning confirmed
            # else
            #   echo cant clean
            # fi

            # export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/Old_Workflow_ID)
            # echo "Old_Workflow_ID=$Old_Workflow_ID"
            # NEW_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            # echo "NEW_WORKFLOW_ID=$NEW_WORKFLOW_ID"
            # if [ -z "$Old_Workflow_ID" ]
            # then
            #     echo "No OLD_WORKFLOW_ID found, nothing to cleanup."
            # else
            #     if [[ "$NEW_WORKFLOW_ID" != "$Old_Workflow_ID" ]]
            #     then
            #         echo "$Old_Workflow_ID!=$NEW_WORKFLOW_ID: the old stack and files are going to be deleted"
            #         aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
            #         aws cloudformation delete-stack --stack-name "udapeople-frontend-${Old_Workflow_ID}"
            #         aws cloudformation delete-stack --stack-name "udapeople-backend-${Old_Workflow_ID}"
            #     else
            #         echo "$Old_Workflow_ID==$NEW_WORKFLOW_ID: the old and new stacks are the same, no changes applied"
            #     fi
            # fi
            
            

  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: cicd_pipeline
          template: success_target_deployment_1            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [dev]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run_db_migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run_db_migrations]
      - deploy-backend:
          requires: [run_db_migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]